Microsoft (R) Macro Assembler Version 6.15.8803		    05/20/21 14:46:38
fallout_procs.asm					     Page 1 - 1


				.386
				.MODEL FLAT

				EXTRN strlen_proc:Near32

				PUBLIC num_matches_proc
				PUBLIC fallout_swap_proc

				INCLUDE io.h
			      C ; IO.H -- header file for I/O macros
			      C ; 32-bit version for flat memory model
			      C ; R. Detmer   last revised 8/2000
			      C .NOLIST     ; turn off listing
			      C .LIST        ; begin listing
			      C 
				INCLUDE debug.h
			      C INCLUDE io.h
			      C ; IO.H -- header file for I/O macros
			      C ; 32-bit version for flat memory model
			      C ; R. Detmer   last revised 8/2000
			      C .NOLIST     ; turn off listing
			      C .LIST        ; begin listing
			      C 
			      C 
 = 0000000D		      C CR          EQU    0Dh   ; carriage return character
 = 0000000A		      C LF          EQU    0Ah   ; linefeed character
			      C 
 00000000		      C .DATA
 00000000 0D 0A 00	      C carriage    BYTE     CR, LF, 0
 00000003  0000000D [	      C text        BYTE     13 DUP(?)
	    00
	   ]
			      C 
			      C outputW    	MACRO   var
			      C                    itoa text, var
			      C                    output text
			      C                    output carriage
			      C                 ENDM
			      C 
			      C outputD  	MACRO  var
			      C                    dtoa text, var
			      C                    output text
			      C                    output carriage
			      C          	ENDM
			      C 
			      C inputW          MACRO  prompt, location
			      C                    output prompt
			      C                    input text, 8
			      C                    atoi text
			      C                    mov location, ax
			      C                 ENDM
			      C 
			      C inputD          MACRO  prompt, location
			      C                    output prompt
			      C                    input text, 13
			      C                    atod text
			      C                    mov location, eax
			      C                 ENDM
			      C 

 00000000			.CODE
					
 = [ebp + 12]			source	EQU	[ebp + 12]	;address of the source
 = [ebp + 8]			dest	EQU [ebp + 8]	;address of the destination

 00000000			num_matches_proc	PROC 	Near32
					;entry code
 00000000  55				push 	ebp
 00000001  8B EC			mov 	ebp, esp
 00000003  57				push 	edi
 00000004  56				push 	esi
 00000005  51				push 	ecx
 00000006  66| 9C			pushf

 00000008  B9 00000000			mov 	ecx, 0
 0000000D  8B 75 0C			mov 	esi, source
 00000010  8B 7D 08			mov 	edi, dest
 00000013  FC				cld

 00000014  FF 75 0C			push 	source
 00000017  E8 00000000 E		call 	strlen_proc
 0000001C  66| 8B C8			mov 	cx, ax	;gets len into counter
 0000001F  B8 00000000			mov		eax, 0

 00000024				while_loop:
 00000024  66| 83 F9 00				cmp 	cx, 0
 00000028  74 08				je 		finished
 0000002A  F2/ A6				repne 	cmpsb
 0000002C  75 04				jne 	finished
 0000002E  66| 40				inc 	ax
 00000030  EB F2				jmp 	while_loop
 00000032				finished:

 00000032  66| 9D			popf
 00000034  59				pop 	ecx
 00000035  5E				pop 	esi
 00000036  5F				pop 	edi
 00000037  8B E5			mov 	esp, ebp
 00000039  5D				pop 	ebp
 0000003A  C2 0008			ret 	8
 0000003D			num_matches_proc	ENDP

 0000003D			fallout_swap_proc	PROC 	Near32
					;entry code
 0000003D  55				push 	ebp
 0000003E  8B EC			mov 	ebp, esp
 00000040  57				push 	edi
 00000041  56				push 	esi
 00000042  50				push 	eax
 00000043  51				push 	ecx
 00000044  66| 9C			pushf

 00000046  B9 00000000			mov 	ecx, 0
 0000004B  8B 75 0C			mov 	esi, source
 0000004E  8B 7D 08			mov 	edi, dest
 00000051  FC				cld

 00000052  FF 75 0C			push 	source
 00000055  E8 00000000 E		call 	strlen_proc
 0000005A  66| 8B C8			mov 	cx, ax
 0000005D  B8 00000000			mov 	eax, 0	;not sure about this yet, but I think it's fine for now

 00000062				swap_loop:		;got this from the lecture
 00000062  83 F9 00				cmp 	ecx, 0
 00000065  74 0C				je 		finished
 00000067  AC					lodsb
 00000068  4E					dec 	esi
 00000069  87 F7				xchg 	esi, edi
 0000006B  A4					movsb
 0000006C  4E					dec 	esi
 0000006D  87 F7				xchg 	esi, edi
 0000006F  AA					stosb
 00000070  49					dec 	ecx
 00000071  EB EF				jmp swap_loop
 00000073				finished:
 00000073  66| 9D				popf
 00000075  59					pop ecx
 00000076  58					pop eax
 00000077  5E					pop esi
 00000078  5F					pop edi
 00000079  8B E5				mov esp, ebp
 0000007B  5D					pop ebp
 0000007C  C2 0008				ret 8
 0000007F			fallout_swap_proc	ENDP

				END
Microsoft (R) Macro Assembler Version 6.15.8803		    05/20/21 14:46:38
fallout_procs.asm					     Symbols 2 - 1




Macros:

                N a m e                 Type

atod . . . . . . . . . . . . . .	Proc
atoi . . . . . . . . . . . . . .	Proc
dtoa . . . . . . . . . . . . . .	Proc
inputD . . . . . . . . . . . . .	Proc
inputW . . . . . . . . . . . . .	Proc
input  . . . . . . . . . . . . .	Proc
itoa . . . . . . . . . . . . . .	Proc
outputD  . . . . . . . . . . . .	Proc
outputW  . . . . . . . . . . . .	Proc
output . . . . . . . . . . . . .	Proc


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
_DATA  . . . . . . . . . . . . .	32 Bit	 00000010 DWord	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000007F DWord	  Public  'CODE'	


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

fallout_swap_proc  . . . . . . .	P Near	 0000003D _TEXT	Length= 00000042 Public
  swap_loop  . . . . . . . . . .	L Near	 00000062 _TEXT	
  finished . . . . . . . . . . .	L Near	 00000073 _TEXT	
num_matches_proc . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000003D Public
  while_loop . . . . . . . . . .	L Near	 00000024 _TEXT	
  finished . . . . . . . . . . .	L Near	 00000032 _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000000h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
CR . . . . . . . . . . . . . . .	Number	 0000000Dh   
LF . . . . . . . . . . . . . . .	Number	 0000000Ah   
atodproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
atoiproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
carriage . . . . . . . . . . . .	Byte	 00000000 _DATA	
dest . . . . . . . . . . . . . .	Text   	 [ebp + 8]
dtoaproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
inproc . . . . . . . . . . . . .	L Near	 00000000 FLAT	External
itoaproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
outproc  . . . . . . . . . . . .	L Near	 00000000 FLAT	External
source . . . . . . . . . . . . .	Text   	 [ebp + 12]
strlen_proc  . . . . . . . . . .	L Near	 00000000 FLAT	External
text . . . . . . . . . . . . . .	Byte	 00000003 _DATA	

	   0 Warnings
	   0 Errors
