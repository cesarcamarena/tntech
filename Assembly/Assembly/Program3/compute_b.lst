Microsoft (R) Macro Assembler Version 6.15.8803		    11/07/18 15:41:01
compute_b.asm						     Page 1 - 1


				.386
				.MODEL FLAT

				INCLUDE io.h
			      C ; IO.H -- header file for I/O macros
			      C ; 32-bit version for flat memory model
			      C ; R. Detmer   last revised 8/2000
			      C .NOLIST     ; turn off listing
			      C .LIST        ; begin listing
			      C 
				INCLUDE debug.h
			      C INCLUDE io.h
			      C ; IO.H -- header file for I/O macros
			      C ; 32-bit version for flat memory model
			      C ; R. Detmer   last revised 8/2000
			      C .NOLIST     ; turn off listing
			      C .LIST        ; begin listing
			      C 
			      C 
 = 0000000D		      C CR          EQU    0Dh   ; carriage return character
 = 0000000A		      C LF          EQU    0Ah   ; linefeed character
			      C 
 00000000		      C .DATA
 00000000 0D 0A 00	      C carriage    BYTE     CR, LF, 0
 00000003  0000000D [	      C text        BYTE     13 DUP(?)
	    00
	   ]
			      C 
			      C outputW    	MACRO   var
			      C                    itoa text, var
			      C                    output text
			      C                    output carriage
			      C                 ENDM
			      C 
			      C outputD  	MACRO  var
			      C                    dtoa text, var
			      C                    output text
			      C                    output carriage
			      C          	ENDM
			      C 
			      C inputW          MACRO  prompt, location
			      C                    output prompt
			      C                    input text, 8
			      C                    atoi text
			      C                    mov location, ax
			      C                 ENDM
			      C 
			      C inputD          MACRO  prompt, location
			      C                    output prompt
			      C                    input text, 13
			      C                    atod text
			      C                    mov location, eax
			      C                 ENDM
			      C 

				PUBLIC compute_b_proc

 = [ebp + 12]			array_addr		EQU [ebp + 12]
 = [ebp + 10]			first_index		EQU [ebp + 10]
 = [ebp + 8]			second_index	EQU [ebp + 8]
 = [ebp - 4]			x				EQU [ebp - 4]

 00000000			.CODE
					_obtain_x MACRO array_name, index
						_setup array_name, index
						mov eax, [ebx]
					ENDM

					_obtain_y MACRO array_name, index
						_setup array_name, index
						add ebx, 4
						mov eax, [ebx]
					ENDM

					_setup MACRO array_name, index
						mov ebx, array_name
						mov ax, index
						movzx eax, ax
						shl eax, 3
						add ebx, eax
					ENDM

 00000000				compute_b_proc PROC Near32
 00000000  55						push ebp
 00000001  8B EC					mov ebp, esp
 00000003  53						push ebx
 00000004  66| 9C					pushf

 00000006					body:
 00000006  FF 75 0C					push DWORD PTR array_addr
 00000009  66| FF 75 0A					push WORD PTR first_index
 0000000D  66| FF 75 08					push WORD PTR second_index
 00000011  E8 00000008					call recursion

 00000016					done:
 00000016  66| 9D					popf
 00000018  8B E5					mov esp, ebp
 0000001A  5D						pop ebp
 0000001B  C2 0008					ret 8
 0000001E				compute_b_proc ENDP

 0000001E				recursion PROC Near32
 0000001E  55					push ebp
 0000001F  8B EC				mov ebp, esp
 00000021  8D 64 24 FC				lea esp, [esp - 4]
 00000025  66| 8B 45 0A				mov ax, first_index
 00000029  66| 3B 45 08				cmp ax, second_index
 0000002D  74 62				je base_case

 0000002F				body:
 0000002F  66| 8B 45 08				mov ax, second_index
 00000033  66| 83 C0 01				add ax, 1
 00000037  FF 75 0C				push DWORD PTR array_addr
 0000003A  66| FF 75 0A				push WORD PTR first_index ;n
 0000003E  66| 50				push ax ;m+1

 00000040  E8 FFFFFFD9				call recursion ;f[n...(m+1)]
 00000045  66| 8B 45 0A				mov ax, first_index
 00000049  66| 83 E8 01				sub ax, 1

 0000004D  FF 75 0C				push DWORD PTR array_addr
 00000050  66| 50				push ax ;n-1
 00000052  66| FF 75 08				push WORD PTR second_index ;m
 00000056  E8 FFFFFFC3				call recursion ;f[n-1 ... m]

 0000005B  DE E9				fsub ;f[n...(m+1)] - f[(n-1)...m]

						_obtain_x array_addr, first_index ;x_n
 0000006E  89 45 FC				mov x, eax
 00000071  D9 45 FC				fld DWORD PTR x

						_obtain_x array_addr, second_index ;x_m
 00000085  89 45 FC				mov x, eax
 00000088  D9 45 FC				fld DWORD PTR x

 0000008B  DE E9				fsub ;x_n - x_m
 0000008D  DE F9				fdiv
 0000008F  EB 1A				jmp done

 00000091				base_case:
						_obtain_y array_addr, first_index ;f(x_n)
 000000A5  89 45 FC				mov x, eax
 000000A8  D9 45 FC				fld DWORD PTR x ;y_n

 000000AB				done:
 000000AB  8B E5				mov esp, ebp
 000000AD  5D					pop ebp
 000000AE  C2 0008				ret 8
 000000B1				recursion ENDP
					
				END
Microsoft (R) Macro Assembler Version 6.15.8803		    11/07/18 15:41:01
compute_b.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

_obtain_x  . . . . . . . . . . .	Proc
_obtain_y  . . . . . . . . . . .	Proc
_setup . . . . . . . . . . . . .	Proc
atod . . . . . . . . . . . . . .	Proc
atoi . . . . . . . . . . . . . .	Proc
dtoa . . . . . . . . . . . . . .	Proc
inputD . . . . . . . . . . . . .	Proc
inputW . . . . . . . . . . . . .	Proc
input  . . . . . . . . . . . . .	Proc
itoa . . . . . . . . . . . . . .	Proc
outputD  . . . . . . . . . . . .	Proc
outputW  . . . . . . . . . . . .	Proc
output . . . . . . . . . . . . .	Proc


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
_DATA  . . . . . . . . . . . . .	32 Bit	 00000010 DWord	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000000B1 DWord	  Public  'CODE'	


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

compute_b_proc . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000001E Public
  body . . . . . . . . . . . . .	L Near	 00000006 _TEXT	
  done . . . . . . . . . . . . .	L Near	 00000016 _TEXT	
recursion  . . . . . . . . . . .	P Near	 0000001E _TEXT	Length= 00000093 Public
  body . . . . . . . . . . . . .	L Near	 0000002F _TEXT	
  base_case  . . . . . . . . . .	L Near	 00000091 _TEXT	
  done . . . . . . . . . . . . .	L Near	 000000AB _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000000h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
CR . . . . . . . . . . . . . . .	Number	 0000000Dh   
LF . . . . . . . . . . . . . . .	Number	 0000000Ah   
array_addr . . . . . . . . . . .	Text   	 [ebp + 12]
atodproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
atoiproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
carriage . . . . . . . . . . . .	Byte	 00000000 _DATA	
dtoaproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
first_index  . . . . . . . . . .	Text   	 [ebp + 10]
inproc . . . . . . . . . . . . .	L Near	 00000000 FLAT	External
itoaproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
outproc  . . . . . . . . . . . .	L Near	 00000000 FLAT	External
second_index . . . . . . . . . .	Text   	 [ebp + 8]
text . . . . . . . . . . . . . .	Byte	 00000003 _DATA	
x  . . . . . . . . . . . . . . .	Text   	 [ebp - 4]

	   0 Warnings
	   0 Errors
